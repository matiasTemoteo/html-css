CSS Flexible Box Module Level 1

Qual é o formato da água?

  R: Vai depender do container (recipiente)


O conteúdo do container vai definir o tamanho dele.


Quem é o pai?

  R: O Container

Quem são os filhos?

  R: Os items


Direção:

 - flex-direction

 - Configuração no pai (container)

 - Configurações:
   - row (em linha - horizontal) - esquerda -> direita

   - row-reverse (em linha - horizontal) - direita -> esquerda

   - column (em linha - vertical) - cima -> baixo

   - column-reverse (em linha - vertical) - baixo -> cima


Eixos:

 - main-axis (Eixo principal - segue a disposição dos elementos)
 - cross-axis (Eixo transversal - cruza o eixo principal)
 - Ambos os eixos possuem dois pontos de controle: start e end.

 -  Quando em direção 'row':

   - main-axis:

	   'start' fica na extremidade esquerda do container
     'end' fica na extremidade direita do container

   - cross-axis:

	   'start' fica na extremidade superior do container
 	   'end' fica na extremidade inferior do container


 - Quando em direção 'row-reverse':

   - main-axis:

	   'start' fica na extremidade direita do container
     'end' fica na extremidade esquerda do container
  
   - cross-axis:

	   'start' fica na extremidade superior do container
 	   'end' fica na extremidade inferior do container


  - Quando em direção 'column':

    - main-axis:

	   'start' fica na extremidade superior do container
	   'end' fica na extremidade inferior do container

    - cross-axis:

	   'start' fica na extremidade esquerda do container
	   'end' fica na extremidade direita do container

- Quando em direção 'column-reverse':

    - main-axis:

	   'start' fica na extremidade inferior do container
	   'end' fica na extremidade superior do container

    - cross-axis:

	   'start' fica na extremidade esquerda do container
	   'end' fica na extremidade direita do container


Empacotamento:

 - flex-wrap

 - Configurações no pai (container)

 - configurações:

   - nowrap: Não empacota - Ao reduzir área do container além da
     área ocupada pelos items, os items irão encolher
     proporcionalmente ao container (a mínimo width que o item pode
     assumir será o tamanho da maior palavra existente).
    

   - wrap: empacota os elementos, quebrando eles para outra linha,
     quando a área do container é reduzida além da área dos items.
     Nesse caso os items não encolhem, mas sim são deslocados
     seguindo o eixo transversal (quando 'row' -> cima ou baixo) e
     (quando 'column' - direita ou esquerda), dependendo se é normal
     ou reverse.

   - wrap-reverse: Funciona exatamento como o wrap, porém, nesse
     caso, os elementos são deslocados no sentido oposto ao eixo
     transversal normal, nesse caso o eixo se inverte e os pontos
     start e end também são invertidos, assim como no row/column-reverse.
 

Configuração conjunta do flex-direction e flex-wrap:

 - flex-flow

 - Configuração no pai (container)

 - short-hand

 - flex-flow: 'flex-direction' 'flex-wrap'

 - Exemplo:
     flex-flow: row wrap;
     flex-flow: column nowrap;


Alinhamento no main-axis:

 - justify-content

 - Configuração no pai (container)

 - Baseando-se apenas no main-axis (relativo a configuração de direction)

 - configurações:

   - flex-start: Posiciona o primeiro elemento junto ao ponto start do main-axis e
     os demais elementos em seguida, sem espaçamento adicional entre eles.

   - flex-end: Posiciona o último elemento junto ao ponto end do main-axis e
     os demais elementos em seguida, sem espaçamento adicional entre eles.

   - center: Posiciona todos os elementos o máximo possível ao centro do container
     calculando spaços iguais em torno do conjunto de elementos (antes e depois 
     dos elementos).

   - space-between: Posiciona o primeiro item junto ao ponto start do main-axis e
     o último item junto ao ponto end do main-axis. Então adiciona espaços simétricos
     entre os items que ficam no centro.

   - space-evenly: Adiciona espaçamentos iguais entre todos os items do container,
     mesmo entre o primeiro e o ponto start do main-axis e o último e o ponto end
     do main-axis.

   - space-around: Cria um espaço simétrico para cada item dentro do container e
     posiciona o respectivo item ao centro deste espaço. Onde nesse caso, o
     primeiro e último items tem apenas o restante do espaço entre ele o limite
     do container. Enquanto os items centrais possuem o espaço deles mais o
     espaço do item imediatamento ao lado do mesmo. Fazendo com que o espaço entre
     o primeiro e último items seja menor do que o existente entre os demais items
     centrais.


Alinhamento no cross-axis:

 - align-items

 - configuração no pai (container)

 - Baseando-se apenas no cross-axis (relativo a configuração do direction)

 - configurações:

   - stretch: Os items irão esticar seguindo o container no cross-axis.

   - flex-start: Posiciona os items seguindo o ponto start do cross-axis.

   - flex-end: Posiciona os items seguindo o ponto end do cross-axis.

   - center: Posiciona os items no centro do container, seguindo o centro do
     cross-axis, definindo espaços simétricos entre os items os pontos start e 
     end do cross-axis.

  * Ao usar a configuração align-items em conjunto com justify-content, é possível
    alinhar os items dentro do container na horizontal e na vertical ao mesmo tempo
    ao setar o valor de ambos para 'center'.


Alinhamento dos elementos no empacotamento (wrap):

 - align-content

 - configuração no pai (container)

 - Baseando-se apenas no cross-axis (relativo a configuração do direction)

 - configurações:

   - stretch: Depois da quebra dos items, vai ser calculado uma área para cada
   linha/coluna gerada pelo wrap de maneira simétrica e os items dentro de cada
   linha, serão esticados seguindo o cross-axis ficando com tamanho total do
   espaço de cada área gerada.

   - flex-start: Depois da quebra dos items, os items dentro do container serão
   posicionados seguindo o ponto start do cross-axis, sem alteração na ordem
   dos items.

   - flex-end: Depois da quebra dos items, os items dentro do container serão
   posicionados seguindo o ponto end do cross-axis, sem alteração na ordem dos
   items.

   - center: Depois da quebra dos items, os items dentro do container serão
   posicionados ao centro do cross-axis, sendo calculado expaços simétricos
   entre os items e os pontos start e end.

   - space-between: Depois da quebra dos items, os items na primeira linha
   serão posicionados junto ao ponto start do cross-axis e os items na
   última linha serão posicionados junto ao ponto end do cross-axis. Todos
   os outros items que estiverm nas linha ntermediárias, serão centralizados e
   será calculado um espaço simétrico entre eles.

   - space-evenly: Depois da quebra dos items, será calculado um espaço simétrico
   entre todos os items e também entre os items na primeira linha item e o ponto
   start e o os items na última linha e e o ponto end, seuindo o cross-axis.
  
   - space-around: Depois da quebra dos items, será definido um espaço simétrico
   para cada linha e os items serão centralizados em suas respectivas linhas, de
   forma que os items na primeira e última linhas terão o espaço apenas da
   propria área entre eles e a extermidade do container e os items no centro, terão
   entre si, is espaços da propria área e da área imediatamente antes e após.


Sobre alinhamento em wrap e nowrap:

 - flex-wrap: wrap:
    - align-content (prioridade)
    - align-items (segunda opção)

 - flex-wrap: nowrap:
    - align-items (única opção)
    - align-content (ignorado)


Ordenação de items

   - order

   - configuração nos filhos (items)

   - configurações:

     - 0 - (padrão) Todos os elementos tem o mesmo order e vão aparecer
     na tela na ordem natural do HTML, seguindo o main-axis como padrão.

     - Qualquer número inteiro, negativo ou positivo (-5, 0, 1, 3, ...)
     Os item serão ordenados dentro do container seguindo a ordem dos
     números, quanto menor o número, primeiro o item será ordenado.
     A ordenação segue o main-axis da mesma forma que seria com order 0.


Alinhamento individual

   - align-self

   - configuração nos filhos (items)

   - Baseando-se apenas no cross-axis (relativo a configuração do direction)

   -configurações:

     - auto: Herda o alinhamento definido no container (align-items)

     - flex-start: Alinha o item junto ao ponto start do cross-axis

     - flex-end: Alinha o item junto ao ponto end do cross-axis

     - center: Alinha o item ao centro do container, seguindo o centro
     do cross-axis, sendo calculado um espaçamento simétrico entre o item
     os pontos start e end.

     - stretch: Extica o item, seguindo o tamanho total do container, seguindo
     o cross-axis.


Tamanho dos items

  - flex-basis

  - configuração nos filhos (items)

  - Baseando-se apenas no main-axis (relativo a configuração do direction)

  -configurações:

    - auto: (padrão) O Tamanho acompanha o tamanho do conteúdo interno
      do item no main-axis. Conforme  o conteúdo aumenta, o tamanho do item
      aumenta também.

    - Tamanho em px: Definie o tamanho máximo do item com exatos x valor em px no
      main-axis, independente do tamanho do conteúdo do item. Porém o tamanho
      do item é adaptável ao tamanho máximo do container e pode ser redimensionado
      conforme o container tem seu tamanho reduxido, seguindo sempre o main-axis.
      Quando os items chegam a um tamanho mínimo, devido ao conteúdo ou alguma
      outa config além das propriedades flex, os item vazam do container.

    - Tamanho em %: Funciona quase igual ao tamanho em px, porém como é em
      porcentagem, o item será redimencionado baseado no tamanho do container,
      tendo como tamanho mínimo o conteúdo interno.


Configuração de crescimento e encolhimento dos items

  - flex-grow / flex-shrink

  - configuração nos filhos (items)

  - Baseando-se apenas no main-axis (relativo a configuração do direction)

  - configurações:

    - auto: No caso do flex-grow, o padrão é o valor 0, o que diz que os items
      não vão crescer junto com o container. No caso do flex-shrink, o padrão
      é 1, o que dis que os items irão encolher junto com o container.

    - valor 1: No caso do flex-grow, o item irá crescer junto com o container.
      No caso do flex-shrink, o item irá encolher junto com o container.

    - Valor maior que 1: O item irá crescer (grow) or encolher (shrink)
      proporcionalmente mais em relação ao item com menor valor para a
      propriedade. Example:
       - Dois items, um com grow 1 e outro com grow 2, o segundo vai crescer
         o dobro em relçao ao primeiro, não por ser 2, mas por ser o dobro do
         menor valor diferente de 0.


Configuração conjunta de flex-basis, flex-grow e flex-shrink:

 - flex

 - confioguração nos filhos (items)

 - Baseando-se apenas no main-axis (relativo a configuração do direction)

 - short-hand

 - flex: 'flex-grow' 'flex-shrink' 'flex-basis'

 - Exemplos:
     flex: 1 0 100px;
     flex: 0 1 50px;

 - Outras configurações:

   - initial: Equivalente a utilizar 'flex: 0 1 auto', onde o item será flexível
     no encolhimento (flex-shrink = 1), mas fixo no crescimento (flex-grow = 0),
     enquanto o tamanho do item é automático (flex-basis = auto). Esse é o valor
     padrão para cada uma das três configurações inlcusas no propriedade flex.

   - none: Equivalente a utilizar 'flex: 0 0 auto', onde o item não será flexível
     nem em encolhimento (flex-shrink) nem em srescimento (flex-grow), mantendo o
     tamanho automático (flex-basis = auto). Essa configuração acaba sendo mais
     rígida e menos flexível.

   - auto: Equivalente a utilizar 'flex: 1 1 auto', onde o item será flexível tanto
     em encolhimento (flex-shrink) quanto em crscimento (flex-grow) e manterá o 
     tamanho como automático (flex-basis = auto). Essa é a configuração mais
     flexível possível em flexbox.

   - valor númerico: Quando se usa um único valor numérico na configuração flex,
     esta sendo configurado apenas o 'flex-grow', enquanto o 'flex-shrink' e 
     o 'flex-basis' se mantém com o valor padrão, que são: 'flex-shrink = 1' e
     'flex-basis = auto'.
