Grid Layout Module 1

Anatomia de um Grid:

 - Grid Container: Caixa que contém os ítems (elemento pai)

 - Grid Items: Item formado pelo espaço das interceções das grades

 - Grid Track: Linha/trilha que se extende por todos os Grid Items em uma direção
   - Row Track - Grid Track na horizontal (grid-row)
   - Column track - Grid Track na vertical (grid-column)
 
 - Grid Lines: As linhas que definem as grades do container
   - Grid Lines Veticais - Definem as Column Tracks
   - Grid Lines Horizontais - Definem as Row Tracks

   * São numeradas, nos sentidos seguintes:

     - Padrão (1, 2, 3, ...n):
        - A partir da primeira linha (1) em direção a útlima (n)
        - Horizontal (row): esquerda > direita,
        - Vertical (column): cima > baixo

     - Inverso (-1, -2, -3, ...-n):
        - A partir da última linha (-1) em direção a primeira (-n)
        - Horizontal (row): direita > esquerda
        - Vertical (column): baixo > cima

 - Grid Area: Area formada por mais de um Grid Item conectados um ao outro,
   orientado no grid usando os índices de numeração dos Grid Lines.

 - Grid Gap: Espaço adicionado entre Grid Items, principalmente para fins de
   design.


Propriedades do Container:

 - display: Define o bloco atual como um container grid.

 - grid-template-columns: Define quantas colunas exisitram no grid.

 - grid-template-rows: Define quantas linha exisitiram no grid.

 - grid-gap: Define o gap (espaço) entre os Grid-items.


Definindo as Colunas do Grid (vertical):

 - grid-template-columns

 - Proproedade do Container (pai)

 - Configurações:

   - Valor individual por coluna em sequência: 100px 100px 50px 90px ...
     O número de colunas será definido pela quantidade de valores informados.
     O tamanho de cada coluna será definido pelo valor informado na respectiva
     posição. Exemplo: Coluna 1 - 100px, coluna 3 - 50px.


Definindo as Linhas do Grid (horizontal):

 - grid-template-rows

 - Propriedade do Container (pai)

 - Configurações:

   - Valor individual por linha em sequência: 30px 90px 30px 40px ...
     O número de linhas será definido pela quantidade de valores informados.
     O tamanho de cada linha será definido pelo valor informado na respectiva
     posição. Exemplo: Linha 1 - 30px, linha 2 - 90px, linha 4 - 40px.


Configuração conjunta de grid-template-rows e grid-template-columns:

 - grid-template

 - Configuração do container (pai)

 - Short-hand

 - grid-template: 'grid-template-rows' 'grid-template-columns'

 - Exemplos:

   - grid-template: 100px 100px / 50px 50px;
   - grid-template: 60px 60px 70px / 100px 50px;


Definindo o Gap entre os Grid-items:

 - grid-gap (obsoleto) | gap (atual)

 - Propriedade do Container (pai)

 - Configurações:

   - Valor em px: O valor informado em px será adicionado em torno dos grid-items
     como um gap (ou um espaço) separando eles.


Alinhamento dos items na vertical:

 - align-items

 - Propriedade do Container (pai)

 - Alinha em relação ao spaço individual de cada grid-item

 - Configurações:

   - stretch: Estica os grid-items na vertical dentro da respectiva área do
     grid-item, até que eles colem nas extremidades, ocupando todo o espaço no
     sentido vertical.

   - start: Posiciona os grid-items na posição start da respectiva área do grid-item
     na vertical (cima).

   - center: Posiciona os grid-items no centro da respetiva área do grid-item
     tendo como base o sentido vertical.

   - end: Posiciona os grid-items na posição end da respectiva área do grid-item
     tendo como base o sentido vertical (baixo).

   - normal (padrão): Valor automático que usa a configuração stretch.


Alinhamento dos items na horizontal:

 - justify-items

 - Propriedade do container (pai)

 - Alinha em relação ao spaço individual de cada grid-item

 - Configurações:

   - stretch - Estica os gri-items na horizontal dentro da respectiva área
     do grid-item, até que eles colem nas extremidades, ocupando todo o espaço no
     sentido horizontal.

   - start: Posiciona os grid-items na posição start da respectiva área do grid-item
     na horizontal (esquerda).

   - center: Posiciona os grid-items no contro da respectiva área do grid-item tendo
     como base o sentido horizontal.

   - end: Posiciona os grid-items na posição end da respectiva área do grid-item
     na horizontal (direita).

   - normal (padrão): Valor automático que usa a configuração stretch.


Configuração conjunta do align-items e justify-items:

 - place-items

 - Propriedade do container (pai)

 - Short-hand

 - place-items: 'align-items' 'justify-content'

 - Exemplos:

   - place-items: start stretch;
   - place-items: center end;


Alinhamento do conteúdo na vertical:

 - align-content

 - Propriedade do container (pai)

 - Alinha todos o items em conjunto em relação ao container

 - Configurações:

   - start - Posiciona o conteúdo na posição start do container no
     sentido vertical (cima).

   - center: Posiciona o conteúdo no centro do container no sentido vertical.

   - end: Posiciona o conteúdo na posição end do container no sentido vertical (baixo).

   - space-between - Posiciona a primeira grid-row (e seus respectivos grid-items) na
     posição start do container, colada na estremidade (cima), posiciona a última grid-row
     (e seus respectivos grid-items) na posição end do container, colada na extremi-
     dade (baixo). Enquanto as demais grid-rows são separadas entre si, por espacos simétricos.
     O alinhamento segue a direção vertical.
     Funciona de maneira semelhante à 'justify-content' no flex-box, com resalvas.

   - space-evenly - Posiciona as grid-rows (e seus respectivos grid-items) de maneira
     a existir um espaço simétrico entre todas elas (entre a primeira e a extremidade
     superior, a última e a extremidade inferior e as demais entre si) seguindo o 
     sentido vertical.

   - space-around - Posiciona as grid-rows (e seus respectivos grid-items) de maneira
     a existir um espaço em volta de todas elas, onde no caso da primeira e da
     última grid-rows o espaço entre elas e a extremidade é somente o dela (único),
     enquanto no caso das demais grid-rows, os espaços serão duplos, pois existirão
     os espaços de cada grid-row somados aos espaços da grid-row imediatamente
     abaixo ou acima dela.

   - stretch - Estica as grid-rows (e seus respectivos grid-items) de maneira
     a ocupar todo o espaço no sentido vertical do container, onde as grid-rows serão
     dimensionadas simetricamente.

   - normal (padrão): Valor automático que usa a configuração stretch.


- Alinhamento do conteúdo na horizontal:

 - justify-content

 - Propriedade do container (pai)

 - Alinha todos o items em conjunto em relação ao container

 - Configurações:

   - start - Posiciona o conteúdo na posição start do container no sentido
     horizontal (esquerda)

   - center - Posiciona o conteúdo no centro do container no sentido horizontal.

   - end - Posiciona o conteúdo na posição end do container no sentido horizontal (direita).

   - space-between - Posiciona a primeira grid-column (e seus respectivos grid-items)
     na posição start do container, colada na extremidade (esquerda), posiciona a 
     última grid-column (e seus respectivos grid-items) na posição end do container,
     colada na extremidade (direita). Enquanto as demais grid-columns são separadas
     entre si por espaços simétricos. O alinhamento segue a direção horizontal.
     Funciona de maneira semelhante à 'justify-content no flex-box, com resalvas.

   - space-evenly - Posiciona as grid-columns (e seus respectivos grid-items) de
     maneira a existir um espaço simétrico entre todas elas (entre a primeira e a
     extremidade esquerda, a última e a extremidade direita e as demais entre si)
     seguindo o sentido horizontal.

   - space-around - Posiciona as grid-columns (e seus respectivos grid-items) de
     maneira a existir um espaço em volta de todas elas, onde no caso da primeira
     e da última grid-columns, o espaço entre elas e as extremidades é somente
     o dela (único), enquanto no caso das demais gri-columns, os espaços serão
     duplos, pois existirão os epaços de cada grid-column somados aos espaços
     da grid-column imediatamente à esquerda e à direita dela.

   - stretch - Estica as grid-columns (e seus respectivos grid-items) de maneira a
     ocupar todo os espaço no sentido horizontal do container, onde as grid-columns
     serão dimensionadas simetricamente.

   - normal (padrão): Valor automático que usa a configuração stretch.


Configuração conjunta do align-content e justify-content:

 - place-content

 - Configuração do container (pai)

 - Short-hand

 - place-content: 'align-content' 'justify-content'

 - Exemplos:

   - place-content: start end;
   - place-content: space-evenly space-around;
   - place-content: center normal;


Configurando linhas adicionais automáticas:

 - grid-auto-row

 - Propriedade do container (pai)

 - Define o tamanho que uma possível linha (grid-row) adicional terá

 - Configuração:

   - Valor em px: Um único valor que irá ser considerado para toda
     grid-row adicional não explicitada através do 'grid-template-rows'.


Configurando colunas adicionais automáticas:

 - grid-auto-column

 - Propriedade do container (pai)

 - Define o tamanho que uma possível coluna (grid-column) terá

 - Configuração:

   - Valor em px: Um único valor que irá ser considerado para toda
     grid-column adicional não explicitada através do 'grid-template-column'.


Definindo o fluxo dos items dentro do container:

 - grid-flow

 - Configuração do container (pai)

 - Define qual será o fluxo com o qual os items serão dispostos dentro
   do container.

 - Configurações:

   - row (padrão): Os items erão dispostos em linha (horizontal), onde ao terminar
     a linha atual, pula para a próxima até dispor todos os items.

   - column: Os items serão dispostos em coluna (vertical), onde ao terminar
     a coluna atual, pula para a próxima a´te dispor todos os items.


Simplificação na declaração de grid-template-rows e grid-template-columns:

 - repeat()

 - Função

 - Repeat(x, size)
   - x = número de repetições,
     size = tamanho da respectiva row ou column

 - Exemplos:

   - grid-template-rows: repeat(3, 50px);
   - grid-template-rows: repeat(2, 25px);

   - grid-template-columns: repeat(4, 150px);
   - grid-template-columns: repeat(2, 100px);

   - grid-template: repeat(2, 30px) / repeat(3, 50px);


Usando fractions para definir rows e columns no container:

  - Fraction

  - Unidade: fr

  - Os valores de fração podem ser usados para definir as rows ou colunas
    de um grid template, da mesma forma como o px ou % onde cada número de fração
    adicionado será uma row ou coluna nova. Porém no caso das frações, o tamanho
    que cada row ou coluna terá será relativ, da seguinte forma:

     - As frações são unitárias, porém podem ser definidas em qualquer valor
       númerico, como 1fr, 2fr ou 5fr. Nesse caso, teríamos 3 row/columns onde
       a primeira ocuparia 1 fração do todo, a segunda, 2 frações do todo e a
       terceira, 5 frações do todo.

  - Exemplos:

    - grid-template-rows: 1fr 1fr;
    - grid-template-columns: 2fr 2fr 4fr;
    - grid-template: repeat(2, 1fr) / repeat(3, 2fr);


  - É possível misturar unidades diferentes na delcaração das rows e colunas,
      onde as rows/columns definidas em unidades diferentes de fração serão
      configuradas com o valor indicado tendo como baso o todo, enquanto os
      valores indicados como fração serão configurados tendo como base somente
      o tamanho restante após a definição dos demais valores não fracionários.

  - Exemplos:

    - grid-template-rows: 50px 1fr 2fr;
    - grid-template-columns: 100px 15% 1fr;
    - grid-template: 30% 10% 1fr 1fr 2fr / 100px 50px 1fr 1fr;
    - grid-template: 70px repeat(2, 1fr) / 15% 2fr repeat(2, 1fr), 50px;


Configurando a área dos items no container grid-layout:

 - grid-row-start
 - grid-row-end
 - grid-column-start
 - grid-column-end

 - Configuração nos items (filhos)

 - Define a partir de quatro pontos as dimensões da área a ser
   ocupada pelo item, usando as grid-lines verticais e horizontais
   como base para os respectivos pontos.

 - As propriedades acima, referen-se as linhas verticais e horizontais
   que definem as grid-rows e grid-columns e não às proprias grid-rows e
   grid-columns.

 - As propriedades 'grid-row-start' e 'grid-row-end' definem as linhas
   superior e inferior da área, delimitando assim sua altura e posição
   vertical dentro do container, enquanto as propriedades 'grid-column-start'
   e 'grid-column-end' definem as linhas lateral-esquerda e lateral-direita
   da área, delimitando assim sua largura e posição horizontal dentro do
   container. As quatro propriedades juntas definem por fim o tamanho e
   área total a ser ocupada pelo respectivo item dentro do container.

 - Os valores para as propriedades são somente numéricos e seguem a ordenação
   das linhas, podendo usar o sentido normal (1, 2, 3 ... n) ou o sentido
   inverso (-1, -2, -3, ... -n).

 - Exemplos:

   - grid-row-start: 1;
     grid-row-end: 2;
     grid-column-start: 1;
     grid-column-end: 2;

     * Esse exemplo define uma área com uma grid-row de altura e uma
       grid-column de largura.

   - grid-row-start: 2;
     grid-row-end: -2;
     grid-column-start: 3;
     grid-column-end: 5;

     * Esse exemplo, em um container com 5 grid-rows e 6 grid-columns,
       definiria uma área com duas grid-rows de altura e duas grid-columns
       de largura. (Nesse exemplo, o valor -2 do row-end refere-se à linha
       vertical 4, pois em um template com 5 linhas verticais, a quinta seria
       a -1 e assim a quarta fica sendo a -2).